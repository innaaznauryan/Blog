{
  "users": [
    {
      "id": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
      "username": "Johnny",
      "fullName": "John Smith",
      "email": "john@mail.ru",
      "password": "Varazdat1"
    },
    {
      "id": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "fullName": "Michael Scott",
      "username": "mScott",
      "email": "mScott@mail.ru",
      "password": "Mscott1"
    },
    {
      "id": "eaed5333-80a6-43b3-b063-3f45c2130fc7",
      "fullName": "Inna Aznauryan",
      "username": "Aznaur",
      "email": "inna.aznauryan@gmail.com",
      "password": "Password1"
    }
  ],
  "active": {
    "id": "7e3cb692-eb58-4e04-9e42-629906aa9598",
    "fullName": "Michael Scott",
    "username": "mScott",
    "email": "mScott@mail.ru",
    "password": "Mscott1"
  },
  "posts": [
    {
      "id": "2",
      "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
      "title": "My first post",
      "user": "John Smith",
      "date": "11 Oct 2023",
      "summary": "Consectetur naut occaecati repellat",
      "content": "Ut dolorum nostrum id quia aut est nfuga est inventore vel eligendi explicabo quis consectetur naut occaecati repellat id natus quo est nut blanditiis quia ut vel ut maiores ea ut dolorum nostrum id quia aut est nfuga est inventore vel eligendi explicabo quis consectetur naut occaecati repellat id natus quo est nut blanditiis quia ut vel ut maiores ea ut dolorum nostrum id quia aut est nfuga est inventore vel eligendi explicabo quis consectetur naut occaecati repellat id natus quo est nut blanditiis quia ut vel ut maiores ea ut dolorum nostrum id quia aut est nfuga est inventore vel eligendi explicabo quis consectetur naut occaecati repellat id natus quo est nut blanditiis quia ut vel ut maiores ea ut dolorum nostrum id quia aut est nfuga est inventore vel eligendi explicabo quis consectetur naut occaecati repellat id natus quo est nut blanditiis quia ut vel ut maiores ea ut dolorum nostrum id quia aut est nfuga est inventore vel eligendi explicabo quis consectetur naut occaecati repellat id natus quo est nut blanditiis quia ut vel ut maiores. \n\nTailwind CSS is a popular utility-first CSS framework that provides a set of pre-defined classes for common styles such as margins, padding, colors, and more. While Tailwind aims to provide a simple and easy-to-use solution for styling websites and applications, sometimes we need to override the default styles or provide custom styles that are not included in the framework. In such cases, we can use !important, and selector strategies to apply our styles.\nNew line",
      "comments": [
        {
          "id": "1fe35466-f311-4745-a1fe-9798ba9ddd53",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 28, 2023, 2:35 PM",
          "content": "Tailwind CSS is a popular utility-first CSS framework that provides a set of pre-defined classes for common styles such as margins, padding, colors, and more. While Tailwind aims to provide a simple and easy-to-use solution for styling websites and applications, sometimes we need to override the default styles or provide custom styles that are not included in the framework. In such cases, we can use !important, and selector strategies to apply our styles."
        },
        {
          "id": "5f2366ae-6142-4541-af8c-e9d995290a06",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 22, 2023, 6:58 PM",
          "content": "hello"
        },
        {
          "id": "7dde3684-d54b-4676-9280-01afb2b77e5d",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 21, 2023, 5:58 PM",
          "content": "This is my fav!"
        },
        {
          "id": "a9792553-20f7-49d3-8657-f67ed6b12afd",
          "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
          "user": "John Smith",
          "email": "john@mail.ru",
          "date": "Nov 20, 2023, 4:27 PM",
          "content": "hellooooo"
        },
        {
          "id": "a0e9ad10-6b3f-4bbc-a2b5-8b94cc6aa638",
          "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
          "user": "John Smith",
          "email": "john@mail.ru",
          "date": "Nov 15, 2023, 12:54 PM",
          "content": "I am John Smith"
        }
      ],
      "likes": [
        "7e3cb692-eb58-4e04-9e42-629906aa9598"
      ]
    },
    {
      "id": "a4550b08-1815-41db-9ded-7d19b072b65d",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "The Urban Dictionary of post",
      "user": "Michael Scott",
      "date": "Nov 10, 2023",
      "summary": "How to Get More Results Out of Your post",
      "content": "Tailwind\n\nTailwind CSS is a popular utility-first CSS framework that provides a set of pre-defined classes for common styles such as margins, padding, colors, and more. While Tailwind aims to provide a simple and easy-to-use solution for styling websites and applications, sometimes we need to override the default styles or provide custom styles that are not included in the framework. In such cases, we can use !important, and selector strategies to apply our styles.\n\nSyntax:\n\nUsing !important: To apply styles with !important, we can add the !important keyword after the value of a property in a class. For example, to make the text color of an element red and override any existing styles, we can use the following class:",
      "comments": [
        {
          "id": "b60c6d58-1b9f-42cc-8806-ce8b210285bd",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 29, 2023, 4:01 PM",
          "content": "Tailwind CSS is a popular utility-first CSS framework that provides a set of pre-defined classes for common styles such as margins, padding, colors, and more. While Tailwind aims to provide a simple and easy-to-use solution for styling websites and applications, sometimes we need to override the default styles or provide custom styles that are not included in the framework. In such cases, we can use !important, and selector strategies to apply our styles."
        },
        {
          "id": "3b0e079e-acda-4b34-a200-6e6d572eabb7",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 17, 2023, 4:08 PM",
          "content": "My name is Michael Scott, this is my comment"
        },
        {
          "id": "f72d8762-0704-4a21-a8da-6c789760ea08",
          "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
          "user": "John Smith",
          "email": "john@mail.ru",
          "date": "Nov 15, 2023, 12:54 PM",
          "content": "I am John Smith"
        }
      ],
      "likes": [
        "587a29ef-da30-4c37-8aa3-94e703b1ac72",
        "eaed5333-80a6-43b3-b063-3f45c2130fc7",
        "7e3cb692-eb58-4e04-9e42-629906aa9598"
      ]
    },
    {
      "id": "a342093d-9dad-40cb-8b1a-cddb81a49a82",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "New Post",
      "user": "Michael Scott",
      "date": "Nov 13, 2023",
      "summary": "Short summary ",
      "content": "Tailwind CSS is a popular utility-first CSS framework that provides a set of pre-defined classes for common styles such as margins, padding, colors, and more. While Tailwind aims to provide a simple and easy-to-use solution for styling websites and applications, sometimes we need to override the default styles or provide custom styles that are not included in the framework. In such cases, we can use !important, and selector strategies to apply our styles.\n\nSyntax:\n\nUsing !important: To apply styles with !important, we can add the !important keyword after the value of a property in a class. For example, to make the text color of an element red and override any existing styles, we can use the following class:",
      "comments": [
        {
          "id": "9bd4cbe5-3d11-43ca-8827-e6b4874f9efd",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 17, 2023, 5:23 PM",
          "content": "this is a very very long comment lorem ipsum dolor. the white fox. jumped over."
        },
        {
          "id": "38aa0c9d-f20e-4195-a1cd-f447d49966bb",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 15, 2023, 5:28 PM",
          "content": "hello"
        }
      ],
      "likes": []
    },
    {
      "id": "b2351135-c344-4641-8971-91c89db3de04",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "New Title",
      "user": "Michael Scott",
      "date": "Nov 13, 2023",
      "summary": "CSS framework",
      "content": "Using Selector Strategies: Tailwind provides a powerful feature called selector strategies, which allows us to target specific elements or components using a combination of classes and selectors. We can use the @layer directive to define our own selector strategies. For example, to target all <a> tags that are direct children of a <nav> element, we can use the following selector strategy:",
      "comments": [
        {
          "id": "c181fb1b-4620-443d-8aea-1429bb291099",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 28, 2023, 2:34 PM",
          "content": "Welcome to my post"
        }
      ],
      "likes": [
        "eaed5333-80a6-43b3-b063-3f45c2130fc7"
      ]
    },
    {
      "id": "aa97465f-78ad-4540-abd9-1e6fd98086ef",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "7 tips",
      "user": "Michael Scott",
      "date": "Nov 16, 2023, 11:08 AM",
      "summary": "Does Your post Pass The Test? 7 Things You Can Improve On Today",
      "content": "Common to Paul’s writings, commands do not come out of thin air, they are grounded in a truth that he has already laid out. He presupposes his readers will read the imperatives in light of the indicatives.\nIt’s easy to overlook the word “therefore,” in verse 5 (above), but let’s not do that. It is there for a reason! And its purpose is to link what came before with what is being said. To be purposefully redundant, the “therefore” links the imperative to the indicative; it links the call to action with the truth that has already been substantiated. So, where is the indicative? Where is that truth that is grounding this ethical call to action? Unsurprisingly, it is contained within the passage that came just prior.",
      "comments": [
        {
          "id": "2dbf4de3-58eb-47da-9234-f1474f8bfeab",
          "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
          "user": "John Smith",
          "email": "john@mail.ru",
          "date": "Nov 23, 2023, 6:29 PM",
          "content": "I like this post"
        },
        {
          "id": "7f392c33-44a6-42d6-ae18-d8b2f5a02b0a",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 21, 2023, 1:38 PM",
          "content": "hey hey"
        }
      ],
      "likes": []
    },
    {
      "id": "48cf5eb9-524a-490c-9ec0-b6c46086a255",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "Lorem ipsum dolor sit amet consectur",
      "user": "Michael Scott",
      "date": "Nov 17, 2023, 11:00 AM",
      "summary": "Lorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet",
      "content": "Lorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet\nlorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet\nlorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet consectur lorem ipsum dolor sit amet",
      "comments": [],
      "likes": []
    },
    {
      "id": "737467ea-46d1-4ced-9003-939ff55c3b74",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "V-if vs. v-show​",
      "user": "Michael Scott",
      "date": "Nov 17, 2023, 11:19 AM",
      "summary": "Conditional rendering",
      "content": "V-if vs. v-show​\nv-if is \"real\" conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.\n\nv-if is also lazy: if the condition is false on initial render, it will not do anything - the conditional block won't be rendered until the condition becomes true for the first time.\n\nIn comparison, v-show is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.\n\nGenerally speaking, v-if has higher toggle costs while v-show has higher initial render costs. So prefer v-show if you need to toggle something very often, and prefer v-if if the condition is unlikely to change at runtime.\n\nv-if vs. v-show​\nv-if is \"real\" conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.\n\nv-if is also lazy: if the condition is false on initial render, it will not do anything - the conditional block won't be rendered until the condition becomes true for the first time.\n\nIn comparison, v-show is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.\n\nGenerally speaking, v-if has higher toggle costs while v-show has higher initial render costs. So prefer v-show if you need to toggle something very often, and prefer v-if if the condition is unlikely to change at runtime.",
      "comments": [
        {
          "id": "695a09c8-3cac-4fec-af92-7880a2a8527d",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 17, 2023, 6:41 PM",
          "content": "comment"
        }
      ],
      "likes": [
        "587a29ef-da30-4c37-8aa3-94e703b1ac72"
      ]
    },
    {
      "id": "8f5799cd-782b-452c-85f3-c6b0bcdb9643",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "Awesome blog post",
      "user": "Michael Scott",
      "date": "Nov 17, 2023, 6:44 PM",
      "summary": "Short summary",
      "content": "Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.\n\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.",
      "comments": [
        {
          "id": "554a6e5c-b29e-47fa-8e73-ebd6d6e99977",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 28, 2023, 2:34 PM",
          "content": "Hello"
        },
        {
          "id": "1afd38f9-f5e4-4c0d-82b7-cc8bc35ee44a",
          "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
          "user": "John Smith",
          "email": "john@mail.ru",
          "date": "Nov 17, 2023, 6:45 PM",
          "content": "I am John, say hello to Michael"
        }
      ],
      "likes": [
        "7e3cb692-eb58-4e04-9e42-629906aa9598"
      ]
    },
    {
      "id": "8b71f97e-cab1-4e7c-ae4d-247c2df75ec6",
      "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
      "title": "Template Syntax",
      "user": "John Smith",
      "date": "Nov 27, 2023, 3:24 PM",
      "summary": "Template Syntax in Vue",
      "content": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data. All Vue templates are syntactically valid HTML that can be parsed by spec-compliant browsers and HTML parsers.\n\nUnder the hood, Vue compiles the templates into highly-optimized JavaScript code. Combined with the reactivity system, Vue can intelligently figure out the minimal number of components to re-render and apply the minimal amount of DOM manipulations when the app state changes.\n\nIf you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also directly write render functions instead of templates, with optional JSX support. However, do note that they do not enjoy the same level of compile-time optimizations as templates.",
      "comments": [
        {
          "id": "2318e516-292f-4274-b00f-6ebfbf7e9569",
          "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
          "user": "Michael Scott",
          "email": "mScott@mail.ru",
          "date": "Nov 28, 2023, 2:34 PM",
          "content": "Thank you for your post, John!"
        },
        {
          "id": "6ea72de9-ac58-40a3-b800-05c4e5d2b8e4",
          "userId": "587a29ef-da30-4c37-8aa3-94e703b1ac72",
          "user": "John Smith",
          "email": "john@mail.ru",
          "date": "Nov 28, 2023, 2:32 PM",
          "content": "This is my post"
        }
      ],
      "likes": [
        "7e3cb692-eb58-4e04-9e42-629906aa9598"
      ]
    },
    {
      "id": "8e3844b7-d4a3-4de1-b900-9887242856cc",
      "userId": "7e3cb692-eb58-4e04-9e42-629906aa9598",
      "title": "How To Generate Killer Headlines",
      "user": "Michael Scott",
      "date": "Nov 28, 2023, 2:40 PM",
      "summary": "Start with the keywords of your blog title",
      "content": "Your blog title keywords will not only play a huge part in getting your post ranked on search engine results pages, they’ll also be responsible for helping readers decide if the post is relevant to them. As such, it’s a good idea to start with some keyword research before you even write your blog post. No idea where to start with keyword research? Don’t worry; we’ve got you covered! Once you’ve established the winning keywords, you can usually reverse engineer a compelling blog title from them.",
      "comments": [],
      "likes": []
    }
  ]
}